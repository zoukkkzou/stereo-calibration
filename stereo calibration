import numpy as np
import cv2
import glob

# termination criteria
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)
w = 9
h = 6
# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((w*h,3), np.float32)
objp[:,:2] = np.mgrid[0:w,0:h].T.reshape(-1,2)
# Arrays to store object points and image points from all the images.
objpointsL = [] # 3d point in real world space
imgpointsL = [] # 2d points in image plane.
objpointsR = []
imgpointsR = []

images = glob.glob('C:/Users/Administrator/Desktop/stereo/left/*.jpg')
for fname in images:
    img = cv2.imread(fname)
    grayL = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    # Find the chess board corners
    ret, cornersL = cv2.findChessboardCorners(grayL, (w,h),None)
    # If found, add object points, image points (after refining them)
    if ret == True:
        objpointsL.append(objp)
        cv2.cornerSubPix(grayL,cornersL,(11,11),(-1,-1),criteria)
        imgpointsL.append(cornersL)
ret, cameraMatrix1, distCoeffs1, rvecs, tvecs = cv2.calibrateCamera(objpointsL, imgpointsL, (640,480), None, None)

images = glob.glob('C:/Users/Administrator/Desktop/stereo/right/*.jpg')
for fname in images:
    img = cv2.imread(fname)
    grayR = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    # Find the chess board corners
    ret, cornersR = cv2.findChessboardCorners(grayR, (w,h),None)
    # If found, add object points, image points (after refining them)
    if ret == True:
        objpointsR.append(objp)
        cv2.cornerSubPix(grayR,cornersR,(11,11),(-1,-1),criteria)
        imgpointsR.append(cornersR)
ret, cameraMatrix2, distCoeffs2, rvecs, tvecs = cv2.calibrateCamera(objpointsR, imgpointsR, (640,480), None, None)

retval,cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F = cv2.stereoCalibrate(objpointsL, imgpointsL, imgpointsR,cameraMatrix1, distCoeffs1,cameraMatrix2, distCoeffs2, imageSize=(640,480))
print("cameraMatrix1:\n",cameraMatrix1)
print("distCoeffs1:\n",distCoeffs1)
print("cameraMatrix2:\n",cameraMatrix2)
print("distCoeffs2:\n",distCoeffs2)

lFrame = cv2.imread('C:/Users/Administrator/Desktop/stereo/left/left01.jpg')
rFrame = cv2.imread('C:/Users/Administrator/Desktop/stereo/right/right01.jpg')
w, h = lFrame.shape[:2] # both frames should be of same shape
frames = [lFrame, rFrame]
# Params from camera calibration
camMats = [cameraMatrix1, cameraMatrix2]
distCoeffs = [distCoeffs1, distCoeffs2]
camSources = [0,1]
for src in camSources:
    distCoeffs[src][0][4] = 0.0 # use only the first 2 values in distCoeffs

# The rectification process
newCams = [0,0]
roi = [0,0]
for src in camSources:
    newCams[src], roi[src] = cv2.getOptimalNewCameraMatrix(cameraMatrix = camMats[src],
    distCoeffs = distCoeffs[src],
    imageSize = (w,h),
    alpha = 0)
rectFrames = [0,0]
for src in camSources:
    rectFrames[src] = cv2.undistort(frames[src],
    camMats[src],
    distCoeffs[src])

# See the results
view = np.hstack([frames[0], frames[1]])
rectView = np.hstack([rectFrames[0], rectFrames[1]])
cv2.imshow('view', view)
cv2.imshow('rectView', rectView)

# Wait indefinitely for any keypress
cv2.waitKey(0)
